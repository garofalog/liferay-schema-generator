{"version":3,"sources":["components/D3SchemaTool/index.js","components/D3SchemaTool3D/index.js","App.js","serviceWorker.js","index.js"],"names":["D3SchemaTool","fgRef","useRef","_useState","useState","Set","_useState2","Object","slicedToArray","highlightNodes","setHighlightNodes","_useState3","_useState4","highlightLinks","setHighlightLinks","_useState5","window","innerWidth","_useState6","width","setWidth","_useState7","innerHeight","_useState8","height","setHeight","_useState9","_useState10","setHoverNode","useEffect","current","d3Force","strength","updateWidthAndHeight","updateHighlight","fieldList","useCallback","node","ctx","globalScale","Fieldslist","fields","forEach","el","i","fieldEl","isAttrPrimary","isForeignKey","attrLongName","React","ev","addEventListener","removeEventListener","react_default","a","createElement","react_force_graph_module","linkWidth","link","has","linkDirectionalParticleWidth","nodeCanvasObjectMode","undefined","onNodeHover","clear","add","onLinkHover","source","target","graphData","myschema","nodeAutoColorBy","linkDirectionalParticles","linkDirectionalParticleSpeed","d","value","nodeCanvasObject","label","id","fontSize","font","concat","bckgDimensions","measureText","map","n","fillStyle","fillRect","apply","x","y","toConsumableArray","textAlign","textBaseline","color","fillText","nodeLabel","onNodeDragEnd","fx","fy","fz","z","ref","D3SchemaTool3D","hoverNode","paintRing","beginPath","arc","NODE_R","Math","PI","fill","handleClick","distRatio","hypot","cameraPosition","toUpperCase","className","backgroundColor","nodeRelSize","onNodeClick","linkDirectionalParticleColor","nodeThreeObject","sprite","SpriteText","textHeight","fillColor","Tabs","props","selected","setSelected","children","item","index","style","key","onClick","handleChange","title","Panel","App","App_Tabs","App_Panel","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c92fbed.chunk.js","sourcesContent":["\nimport React, { useRef, useCallback, useState, useEffect } from \"react\";\nimport { ForceGraph2D } from 'react-force-graph';\nimport myschema from \"./../../my-schema-nodes.json\"\n\nexport default () => {\n    const fgRef = useRef();\n    const [highlightNodes, setHighlightNodes] = useState(new Set());\n    const [highlightLinks, setHighlightLinks] = useState(new Set());\n    const [width, setWidth] = useState(window.innerWidth);\n    const [height, setHeight] = useState(window.innerHeight);\n    // eslint-disable-next-line no-unused-vars\n    const [hoverNode, setHoverNode] = useState(null);\n\n    useEffect(() => {\n        const fg = fgRef.current;\n        fg.d3Force('charge').strength(-400);\n    }, []);\n\n    const updateWidthAndHeight = () => {\n        setWidth(window.innerWidth - 100);\n        setHeight(window.innerHeight - 150);\n    };\n\n    const updateHighlight = () => {\n        setHighlightNodes(highlightNodes);\n        setHighlightLinks(highlightLinks);\n    };\n\n    const handleNodeHover = node => {\n        highlightNodes.clear();\n        highlightLinks.clear();\n        if (node) {\n            highlightNodes.add(\"node\");\n        }\n        setHoverNode(node || null);\n        updateHighlight();\n    };\n\n    const handleLinkHover = link => {\n        highlightNodes.clear();\n        highlightLinks.clear();\n        if (link) {\n            highlightLinks.add(link);\n            highlightNodes.add(link.source);\n            highlightNodes.add(link.target);\n        }\n        updateHighlight();\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const fieldList = useCallback((node, ctx, globalScale) => {\n        let Fieldslist = ''\n        node.fields.forEach((el, i) => {\n            let fieldEl\n            if (el.isAttrPrimary && el.isForeignKey) {\n                fieldEl = \"ðŸ”’ & ðŸ”‘ \" + el.attrLongName\n            } else if (el.isAttrPrimary && !el.isForeignKey) {\n                fieldEl = \"ðŸ”’&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" + el.attrLongName\n            } else if (!el.isAttrPrimary && el.isForeignKey) {\n                fieldEl = \"ðŸ”‘&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" + el.attrLongName\n            } else {\n                fieldEl = \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" + el.attrLongName\n            }\n            Fieldslist += fieldEl + \"<br>\"\n        })\n        return Fieldslist\n    })\n\n    React.useEffect(() => {\n        [\"DOMContentLoaded\", \"resize\", \"onload\"].forEach(ev => {\n            window.addEventListener(ev, updateWidthAndHeight);\n        })\n        return () => window.removeEventListener(\"DOMContentLoaded\", updateWidthAndHeight);\n    });\n    \n    return (\n        <div>\n            <ForceGraph2D\n                width={width}\n                height={height}\n                linkWidth={ link => highlightLinks.has(link) ? 10 : 1 }\n                linkDirectionalParticleWidth={ link => highlightLinks.has(link) ? 4 : 0 }\n                nodeCanvasObjectMode={ node => highlightNodes.has(node) ? 'before' : undefined }\n                onNodeHover={handleNodeHover}\n                onLinkHover={handleLinkHover}\n                graphData={myschema}\n                nodeAutoColorBy=\"group\"\n                linkDirectionalParticles=\"value\"\n                linkDirectionalParticleSpeed={d => d.value * 0.001}\n                nodeCanvasObject = {\n                    (node, ctx, globalScale) => {\n                        const label = node.id;\n                        const fontSize = 12 / globalScale;\n                        ctx.font = `${fontSize}px Sans-Serif`;\n                        const textWidth = ctx.measureText(label).width;\n                        const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2);\n                        ctx.fillStyle = 'rgba(217, 238, 255, 0.4)';\n                        ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n                        ctx.textAlign = 'center';\n                        ctx.textBaseline = 'middle';\n                        ctx.fillStyle = node.color;\n                        ctx.fillText(label, node.x, node.y);\n                    }\n                }\n                nodeLabel={fieldList}\n                onNodeDragEnd = {\n                    node => {\n                        node.fx = node.x;\n                        node.fy = node.y;\n                        node.fz = node.z;\n                    }\n                }\n                ref={fgRef}\n            />\n        </div>\n    );\n};\n","\nimport React, { useRef, useCallback, useState } from \"react\";\nimport {ForceGraph3D} from 'react-force-graph';\nimport myschema from \"../../my-schema-nodes.json\"\nimport SpriteText from 'three-spritetext';\nconst NODE_R = 8;\n\nexport default () => {\n\n    const [highlightNodes, setHighlightNodes] = useState(new Set());\n    const [highlightLinks, setHighlightLinks] = useState(new Set());\n    const [width, setWidth] = useState(window.innerWidth);\n    const [height, setHeight] = useState(window.innerHeight);\n    // eslint-disable-next-line no-unused-vars\n    const [hoverNode, setHoverNode] = useState(null);\n\n    const updateHighlight = () => {\n        setHighlightNodes(highlightNodes);\n        setHighlightLinks(highlightLinks);\n    };\n\n    const updateWidthAndHeight = () => {\n        setWidth(window.innerWidth-100);\n        setHeight(window.innerHeight-150);\n    };\n\n    const handleLinkHover = link => {\n        highlightNodes.clear();\n        highlightLinks.clear();\n        if (link) {\n            highlightLinks.add(link);\n            highlightNodes.add(link.source);\n            highlightNodes.add(link.target);\n        }\n        updateHighlight();\n    };\n\n    const paintRing = useCallback((node, ctx) => {\n        ctx.beginPath();\n        ctx.arc(node.x, node.y, NODE_R * 1.4, 0, 2 * Math.PI, false);\n        ctx.fillStyle = node === hoverNode ? 'red' : 'orange';\n        ctx.fill();\n    }, [hoverNode]);\n\n    const fgRef = useRef();\n\n    const handleClick = useCallback(node => {\n        const distance = 40;\n        const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n        fgRef.current.cameraPosition(\n            { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio },\n            node,\n            3000\n        );\n    }, [fgRef]);\n\n    React.useEffect(() => {\n        [\"DOMContentLoaded\", \"resize\", \"onLoad\"].forEach(ev => {\n            window.addEventListener(ev, updateWidthAndHeight);\n        })\n        // return () => window.removeEventListener(\"DOMContentLoaded\", updateWidthAndHeight);\n    });\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const fieldList = useCallback((node, ctx, globalScale) => {\n        let Fieldslist = node.id.toUpperCase() + \"<br>\"\n        node.fields.forEach((el, i) => {\n            let fieldEl\n            if (el.isAttrPrimary && el.isForeignKey) {\n                fieldEl = \"ðŸ”’ & ðŸ”‘ \" + el.attrLongName\n            } else if (el.isAttrPrimary && !el.isForeignKey) {\n                fieldEl = \"ðŸ”’&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" + el.attrLongName\n            } else if (!el.isAttrPrimary && el.isForeignKey) {\n                fieldEl = \"ðŸ”‘&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" + el.attrLongName\n            } else {\n                fieldEl = \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" + el.attrLongName\n            }\n            Fieldslist += fieldEl + \"<br>\"\n        })\n        return Fieldslist\n    })\n\n    return (\n        <div>\n            <ForceGraph3D\n                className=\"canvas3d\"\n                width={width}\n                height={height}\n                backgroundColor=\"#000\"\n                nodeRelSize={NODE_R}\n                ref={fgRef}\n                graphData={myschema}\n                nodeLabel={fieldList}\n                linkWidth={link => highlightLinks.has(link) ? 5 : 1}\n                linkDirectionalParticleWidth={link => highlightLinks.has(link) ? 4 : 0}\n                nodeCanvasObjectMode={node => highlightNodes.has(node) ? 'before' : undefined}\n                onLinkHover={handleLinkHover}\n                nodeCanvasObject={\n                    (node, ctx, globalScale) => {\n                        paintRing()\n                        const label = node.id;\n                        const fontSize = 12 / globalScale;\n                        ctx.font = `${fontSize}px Sans-Serif`;\n                        const textWidth = ctx.measureText(label).width;\n                        const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2)\n                        ctx.fillStyle = 'rgba(217, 238, 255, 1)';\n                        ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n                        ctx.textAlign = 'center';\n                        ctx.textBaseline = 'middle';\n                        ctx.fillStyle = node.color;\n                        ctx.fillText(label, node.x, node.y);\n                    }\n                }\n                nodeAutoColorBy=\"group\"\n                onNodeClick={handleClick}\n                linkDirectionalParticleColor={() => 'cyan'}\n                linkDirectionalParticles=\"value\"\n                linkDirectionalParticleSpeed={d => d.value * 0.001}\n                nodeThreeObject={node => {\n                    const sprite = new SpriteText(node.id);\n                    sprite.color = node.color;\n                    sprite.textHeight = 8;\n                    sprite.fillColor = \"red\"         \n                    return sprite;\n                }}\n            />\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport D3DbSchemaTool from \"./components/D3SchemaTool\"\nimport D3DbSchemaTool3D from \"./components/D3SchemaTool3D\"\n\nconst Tabs = (props) => {\n    const [selected, setSelected] = useState(props.selected || 0);\n    \n    const handleChange = (index) => {\n        setSelected(index);\n    }\n\n    return (\n        <div>\n            <ul className=\"inline\">\n                {\n                    props.children.map((item, index) => {\n                        let style = index === selected ? ' selected' : '';\n                        return <li\n                            className={style}\n                            key={index}\n                            onClick={() => handleChange(index)}>\n                            {item.props.title}\n                        </li>;\n                    })\n                }\n            </ul>\n            <div className=\"tab\">{props.children[selected]}</div>\n        </div>\n    )\n}\n\nconst Panel = (props) => {\n    return <div className=\"panel\">{props.children}</div>\n}\n\nfunction App() {\n    return (\n\n        <Tabs selected={0}>\n            <Panel title=\"3D Schema\">\n                <D3DbSchemaTool3D />\n            </Panel>\n            <Panel title=\"2D Schema\">\n                <D3DbSchemaTool />\n            </Panel>\n        </Tabs>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}